Conditionals and Control Flow

To be TRUE or not be TRUE, that's the question. 
In this chapter you'll learn about relational operators to see how R objects compare and logical operators to combine logicals.
Next, you'll use this knowledge to build conditional statements.

1.Relational Operators : 
  https://campus.datacamp.com/courses/intermediate-r/chapter-1-conditionals-and-control-flow?ex=1
------------------------------------------------------------------------------------------------------------------------------

2. Equality
------------------------------------------------------------------------------------------------------------------------------
The most basic form of comparison is equality. Let's briefly recap its syntax.
The following statements all evaluate to TRUE
3 == (2 + 1)
"intermediate" != "r"
TRUE != FALSE
"Rchitect" != "rchitect"

Notice from the last expression that R is case sensitive: "R" is not equal to "r". 
Keep this in mind when solving the exercises in this chapter!
Instructions: 
>In the editor on the right, write R code to see if TRUE equals FALSE.
>Likewise, check if -6 * 14 is not equal to 17 - 101.
>Next up: comparison of character strings. Ask R whether the strings "useR" and "user" are equal.
>Finally, find out what happens if you compare logicals to numerics: are TRUE and 1 equal?

Sample: 
# Comparison of logicals

# Comparison of numerics

# Comparison of character strings

# Compare a logical with a numeric


Solution 
# Comparison of logicals
TRUE == FALSE
# Comparison of numerics
-6 * 14 != 17 -101
# Comparison of character strings
"useR" == "user"
# Compare a logical with a numeric
TRUE == 1 
------------------------------------------------------------------------------------------------------------------------------

2. Greater and less than

Apart from equality operators, Filip also introduced the less than and greater than operators. 
These relations, represented as < and > in R, can be combined with an equal sign to express an inequality. 
All R expressions in the following code chunk evaluate to FALSE:
(1 + 2) > 4
"dog" < "Cats"
TRUE <= FALSE

Remember that for string comparison, R determines the greater than relationship based on the alphabet. 
Also, keep in mind that TRUE corresponds to 1 in R, while FALSE coerces to 0 behind the scenes. 
Therefore, FALSE < TRUE is TRUE.

Instructions: 
> -6 * 5 + 2 is greater than or equal to -10 + 1
> "raining" is less than or equal to "raining dogs"
> TRUE is greater than FALSE

==Sample

# Comparison of numerics

# Comparison of character strings

# Comparison of logicals

==Solution

# Comparison of numerics
-6 * 5 + 2 >= -10 + 1
# Comparison of character strings
"raining" <= "raining dogs"
# Comparison of logicals
TRUE > FALSE 

Console:
 > # Comparison of numerics
> -6 * 5 + 2 >= -10 + 1
[1] FALSE
> # Comparison of character strings
> "raining" <= "raining dogs"
[1] TRUE
> # Comparison of logicals
> TRUE > FALSE
[1] TRUE
------------------------------------------------------------------------------------------------------------------------------

3. Compare Vectors 
You are already aware that R is a master at handling vectors. 
Without having to change anything about the syntax, R's relational operators also work on vectors.

Let's go back to the example that was started in the video.
You want to figure out whether your marketing efforts, funny tweets and facebook posts have increased your visibility on 
various social media platforms, more specifically LinkedIn and Facebook. The sample code in the editor intializes the vectors
linkedin and facebook. Each of the vector contains the number of profile views of your LinkedIn and Facebook profiles in the
last seven days.

Instructions
Using relational operators, find a logical answer, i.e. TRUE or FALSE, to the following questions:
>For which days the number of LinkedIn profile views exceeded 15?
>When was your LinkedIn profile viewed only 5 times or less?
>When was your LinkedIn profile visited more often than your Facebook profile?

Sample:
# The linkedin and facebook vectors have already been created for you
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)
# Popular days

# Quiet days

# LinkedIn more popular than Facebook

Solution:

# Popular days
linkedin > 15

# Quiet days
linkedin <= 5 

# LinkedIn more popular than Facebook
linkedin > facebook 

Console: 
> # Popular days
> linkedin > 15
[1]  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE
> # Quiet days
> linkedin <= 5
[1] FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE
> # LinkedIn more popular than Facebook
> linkedin > facebook
[1] FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE
------------------------------------------------------------------------------------------------------------------------------

4. Compare matrices

R's ability to deal with different data structures for comparisons does not stop at vectors. You'll see that it is
straightforward to use matrices together with relational operators!
Instead of in vectors (as in the previous exercise), the LinkedIn and Facebook data is now contained in a matrix called views.
The first row contains the LinkedIn information; the second row the Facebook information.
The original vectors facebook and linkedin are still available as well.


Instructions:
Using the relational operators you've learned so far, discover:
>When were the views exactly equal to 13? Use the views matrix to return a matrix containing logicals.
>For which days was the number of views less than or equal to 14? Again, have R return a logical matrix.
>How often did the number of Facebook views equal or exceed twice the LinkedIn views during a single day?
Use the sum() function in combination with the linkedin and facebook vectors.

Sample:

 # The social data has been created for you
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)
views <- matrix(c(linkedin, facebook), nrow = 2, byrow = TRUE)
# When does views equal 13?
# When is views less than or equal to 14?
# How often does facebook equal or exceed linkedin times two?

Solution :

# The social data has been created for you
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)
views <- matrix(c(linkedin, facebook), nrow = 2, byrow = TRUE)
# When does views equal 13?
views == 13
# When is views less than or equal to 14?
views <= 14
# How often does facebook equal or exceed linkedin times two?
sum(facebook >= linkedin * 2)

Console:
> # The social data has been created for you
> linkedin <- c(16, 9, 13, 5, 2, 17, 14)
> facebook <- c(17, 7, 5, 16, 8, 13, 14)
> views <- matrix(c(linkedin, facebook), nrow = 2, byrow = TRUE)
> # When does views equal 13?
> views == 13
      [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]
[1,] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE
[2,] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE
> # When is views less than or equal to 14?
> views <= 14
      [,1] [,2] [,3]  [,4] [,5]  [,6] [,7]
[1,] FALSE TRUE TRUE  TRUE TRUE FALSE TRUE
[2,] FALSE TRUE TRUE FALSE TRUE  TRUE TRUE
> # How often does facebook equal or exceed linkedin times two?
> sum(facebook >= linkedin * 2)
[1] 2
------------------------------------------------------------------------------------------------------------------------------

& and |

Write R expressions to solve the following questions concerning last:
>Is last under 5 or above 10?
>Is last between 15 and 20, excluding 15 but including 20?
>Is last between 0 and 5 (excluding both) or between 10 and 15 (excluding both)? 
  There's already some erroneous code in there, up to you to fix it!
  
Solution:
# The linkedin and last variable are already defined for you
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
last <- tail(linkedin, 1)

# Is last under 5 or above 10?
last < 5 | last > 10 
# Is last between 15 (exclusive) and 20 (inclusive)?
last > 15 & last <=20

# Is last between 0 and 5 or between 10 and 15?
(last > 0 & last < 5) | (last > 10 & last < 15)
  
------------------------------------------------------------------------------------------------------------------------------

& and | (2)

Just as relational operators, logical operators work perfectly fine with vectors and matrices.

Instructions

>When did LinkedIn views exceed 10 and Facebook views did not reach 10 for a particular day?
  Use the linkedin and facebook vectors.
>When were one or both your LinkedIn and Facebook profiles visited at least 12 times?
>When is the views matrix equal to a number between 11 and 14, excluding 11 and including 14?

Solution :
 # The social data (linkedin, facebook, views) has been created for you

# linkedin exceeds 10 but facebook below 10
linkedin > 10 & facebook < 10

# When were one or both visited at least 12 times?
linkedin >= 12 | facebook >= 12

# When is views between 11 (exclusive) and 14 (inclusive)?
views > 11 & views <= 14 

------------------------------------------------------------------------------------------------------------------------------

***Reverse the result: !

Solution: False

------------------------------------------------------------------------------------------------------------------------------
Blend it all together.
Instead of recording the number of LinkedIn profile views only for yourself, suppose you conducted a survey inside the company
you're working for. You've asked every employee with a LinkedIn profile how often their LinkedIn profile was visited in the 
past seven days, and stored the results in a data frame, called li_df

Goal : Analyze the data for the second day
Find the number of employees that are either very popular (more than 25 profile views) or rather unnoticeable (views are below 5) 
on the second day, i.e. column day2 of the data frame li_df. Simply print this number to the console.


Solution:

print(sum((li_df$day2 > 25) |(li_df$day2 < 5)))

------------------------------------------------------------------------------------------------------------------------------


